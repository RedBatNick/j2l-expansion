<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorInputOverlay</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buttonConfig_Create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update current binds

for (var i = 0; i &lt; numberOfKeys - 1; i+=1)
{
    bindName[i] = scrGetKeybind(global.controls[i, 0]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///backing and label
var back_w = 256;
var back_h = 800;
var label_yo = 0;

fontSetup(global.systemfont,c_black,fa_center,fa_center,1);

var xx = 928-back_w/2;
var yy = 304-back_h/2;

draw_sprite_ext(sPopup,0,xx+1,yy,(back_w-1)/sprite_get_width(sPopup),back_h/sprite_get_height(sPopup),0,c_white,1);
draw_rectangle(xx,yy,xx+back_w-1,yy+back_h-1,true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text setup</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///text box
if (mode == input_textbox) 
{   
    var textbox_yo = -10;
    var textbox_w = 40;
    var textbox_h = 32;
    var cursor_h = 20;
    
    var xx = 928-textbox_w/2;
    var yy = 304+textbox_yo;
    var ycenter = yy+textbox_h/2;
    
    drawButton(xx,yy,textbox_w,textbox_h,true);
    fontSetup(global.systemfont,c_black,fa_left,fa_center,1);
    draw_text(xx+6,ycenter,keyboard_string);
    
    if (floor(global.count/20) mod 2 == 0)
    {
        var xxx = xx+string_width(keyboard_string)+8;
        draw_line(xxx,ycenter-cursor_h/2,xxx,ycenter+cursor_h/2);
    }
    
    fontSetup(global.systemfont,c_black,fa_right,fa_center,1);
    draw_text(xx-3,ycenter,textbox_label);
    
    var button_yo = 30;
    var button_w = 80;
    var button_h = 32;
    
    if (menuButton(928-button_w/2,304+button_yo,button_w,button_h,"Ok",true,false)
    || keyboard_check_pressed(vk_enter)) {
        inputOverlayStringSubmit();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///text area
if (mode == input_textarea)
{
    var textbox_w = 400;
    var textbox_h = max(160, string_height(keyboard_string)+26);
    var textbox_yo = -10-64-(textbox_h-160)/2;
    var cursor_h = 20;
    
    var xx = 928-textbox_w/2;
    var yy = 304+textbox_yo;
    var ycenter = yy+textbox_h/2;
    
    drawButton(xx,yy,textbox_w,textbox_h,true);
    fontSetup(global.systemfont,c_black,fa_left,fa_top,1);
    draw_text(xx+6,yy+6,keyboard_string);
    
    // find cursor position and draw it
    if (floor(global.count/20) mod 2 == 0) 
    {
        var tempstr = keyboard_string;
        var charindex = 0;
        var numlines = 0;
        var lastnewline = string_pos("#", tempstr);
        
        while (lastnewline != 0) 
        {
            charindex += lastnewline;
            tempstr = string_copy(tempstr, lastnewline+1, string_length(tempstr)-lastnewline);
            numlines += 1;
            lastnewline = string_pos("#", tempstr);
        }
        
        var xxx = xx+string_width(tempstr)+8;
        var yyy = yy+6+6+string_height("1")*numlines;
        draw_line(xxx,yyy-cursor_h/2,xxx,yyy+cursor_h/2);
    }
    fontSetup(global.systemfont,c_black,fa_center,fa_center,1);
    draw_text(928,yy-32,label);
    
    var button_yo = 30;
    var button_w = 80;
    var button_h = 32;
    
    if (menuButton(928-button_w/2,yy+textbox_h+16,button_w,button_h,"Ok",true,false)) {
        inputOverlayStringSubmit();
    }
    if (keyboard_check_pressed(vk_enter)) {
        keyboard_string += "#";
    }
    else if (keyboard_check_pressed(ord('C'))) //copy code to clipboard
    {
        if (keyboard_check_direct(vk_control)) 
        {
            //keyboard_string = string_copy(keyboard_string,1,string_length(keyboard_string)-1)
            clipboard_set_text(string_replace_all(keyboard_string,"#",chr(13)+chr(10)));
        }
    }
    else if (keyboard_check_pressed(ord('V'))) //paste to append code from clipboard
    {
        if (keyboard_check_direct(vk_control)) {
            keyboard_string += string_replace_all(string_replace_all(clipboard_get_text(),chr(13),""),chr(10),"#");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attributes
if (mode == input_attributes)
{
    var textbox_w = 40;
    var textbox_h = 32;
    var textbox_yo = -10-64-(textbox_h-160)/2;
    var cursor_h = 20;
    
    var xx = 928-textbox_w/2;
    var yy = 304+textbox_yo;
    var ycenter = yy+textbox_h/2;
    
    drawButton(xx,yy,textbox_w,textbox_h,true);
    fontSetup(global.systemfont,c_black,fa_left,fa_top,1);
    draw_text(xx+6,yy+6,keyboard_string);
    
    if (floor(global.count/20) mod 2 == 0)
    {
        var xxx = xx+string_width(keyboard_string)+8;
        draw_line(xxx,ycenter-cursor_h/2,xxx,ycenter+cursor_h/2);
    }
    
    fontSetup(global.systemfont,c_black,fa_center,fa_center,1);
    draw_text(928,yy-32,label);

    var button_yo = 30;
    var button_w = 80;
    var button_h = 32;
    
    if (menuButton(928-button_w/2,yy+textbox_h+16,button_w,button_h,"Ok",true,false)) {
        inputOverlayStringSubmit();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>file dropdowns</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///map formatting
if (mode == input_fileformat) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Parse Other Map Formats";
    var xx = 928-65;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {
            case 0: //open RMJ map
            var tt = "Import a Record My Jumps .map file.";
            
            if (menuButton(xx-69,yy,w,h,"Import RMJ",true,sMenuOpenRMJMap,tt)) 
            {
                if (!oEdit.undo_nochanges) 
                {
                    inputOverlay(input_yesno,inputCallback_LoadRMJMap,
                    "Map has been modified. Save changes?");
                }
                else 
                {
                    global.input_bool = false;
                    global.input_cancel = false;
                    inputCallback_LoadMap("rmj");
                }
            }
            
            //save RMJ map
            var tt = "Export map as a Record My Jumps .map file.";
            
            if (menuButton(xx+69,yy,w,h,"Export RMJ",true,sMenuSaveRMJMap,tt))
            {
                if (window_get_fullscreen()) 
                {
                    window_set_fullscreen(false);
                    oWorld.alarm[0] = 1;
                    oWorld.buffertype = "rmj";
                    oWorld.alarm[1] = 2;
                }
                else { saveRMJMap(); }
            } break;
            
            
            case 1: //open old jmap
            var tt = "Import a legacy .jmap file.
            Legacy jmaps are any official .jmaps made prior to version 2.0.0.";
            
            if (menuButton(xx-69,yy,w,h,"Import Legacy",true,sMenuOpenJMap,tt)) 
            {
                if (!oEdit.undo_nochanges) 
                {
                    inputOverlay(input_yesno,inputCallback_LoadMap("legacy"),
                    "Map has been modified. Save changes?");
                }
                else 
                {
                    global.input_bool = false;
                    global.input_cancel = false;
                    inputCallback_LoadMap("legacy");
                }
            }
            
            //save old jmap
            var tt = "Export map as a legacy .jmap file.
            Legacy jmaps are any official .jmaps made prior to version 2.0.0.";
            
            if (menuButton(xx+69,yy,w,h,"Export Legacy",true,sMenuSaveJMap,tt)) 
            {
                if (window_get_fullscreen()) 
                {
                    window_set_fullscreen(false);
                    oWorld.alarm[0] = 1;
                    oWorld.buffertype = "legacy";
                    oWorld.alarm[2] = 2;
                }
                else { saveMapAskName("legacy"); }
            } break;
            
            
            case 2: //open cmap
            var tt = "Import a .cmap file.";
            
            if (menuButton(xx-69,yy,w,h,"Import Ctool",true,sMenuOpenCMap,tt)) 
            {
                if (!oEdit.undo_nochanges) 
                {
                    inputOverlay(input_yesno,inputCallback_LoadMap("ctool"),
                    "Map has been modified. Save changes?");
                }
                else 
                {
                    global.input_bool = false;
                    global.input_cancel = false;
                    inputCallback_LoadMap("ctool");
                }
            }
            
            //save cmap
            var tt = "Export map as a .cmap file.";
            
            if (menuButton(xx+69,yy,w,h,"Export Ctool",true,sMenuSaveCMap,tt)) 
            {
                if (window_get_fullscreen()) 
                {
                    window_set_fullscreen(false);
                    oWorld.alarm[0] = 1;
                    oWorld.buffertype = "ctool";
                    oWorld.alarm[2] = 2;
                }
                else { saveMapAskName("ctool"); }
            } break;
                        
            
            case 3: //open iwm map
            var tt = "Import an I Wanna Maker .map file.
            IWM maps are structurally very different from .jmaps, so a lot of information will be lost.";
            
            if (menuButton(xx-69,yy,w,h,"Import IWM",true,sMenuOpenIWMMap,tt)) 
            {

            }
            
            //save iwm map
            var tt = "Export map as an I Wanna Maker .map file.
            IWM maps are structurally very different from .jmaps, so a lot of information will be lost.";
            
            if (menuButton(xx+69,yy,w,h,"Export IWM",true,sMenuSaveIWMMap,tt)) 
            {
            
            } break;
            
            
            case 4: //open gmx room
            var tt = "Import a GameMaker: Studio .gmx room file.";
            
            if (menuButton(xx-69,yy,w,h,"Import GMX",true,sMenuOpenGMXRoom,tt))
            {

            }
            
            //save gmx room
            var tt = "Export map as a GameMaker: Studio .gmx room file.";
            
            if (menuButton(xx+69,yy,w,h,"Export GMX",true,sMenuSaveGMXRoom,tt))
            {
            
            } break;
            
            
            case 5: //open gm82 room
            var tt = "Import a GameMaker 8.2 room folder as a map.";
            
            if (menuButton(xx-69,yy,w,h,"Import GM82",true,sMenuOpenGM82Room,tt))
            {

            }
            
            //save gm82 room
            var tt = "Export map as a GameMaker 8.2 room folder.";
            
            if (menuButton(xx+69,yy,w,h,"Export GM82",true,sMenuSaveGM82Room,tt))
            {
            
            } break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///recording
if (mode == input_filerecord) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Recording";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {        
            case 0: //start recording
            var tt = "Start a recording
            (Will restart the room once pressed).";
            
            if (menuButton(xx,yy,w,h,"Start",true,sMenuRecord,tt)) 
            {
                global.PlayerFrameCounter = 0;
                startRecord();
                escape_button_just_clicked = true;
            } break;
            
            
            case 1: //stop recording
            var tt = "Stop a currently active recording.";
            
            if (menuButton(xx,yy,w,h,"Stop",true,sMenuStop,tt))
            {
                global.savecount = 0;
                global.SavedPlayerFrameCounter = global.PlayerFrameCounter;
                global.RecordPlayerPosition = true;
                
                if (instance_exists(oPlayer)) 
                {
                    global.stopX = oPlayer.x;
                    global.stopY = oPlayer.y;
                    global.stopgrav = global.recordGrav;
                    global.stopplayer_xscale = global.player_xscale;
                    global.stopVspeed = oPlayer.vspeed;
                    global.stopDjump = oPlayer.djump;
                }
                else if (global.paused)
                { 
                    global.stopX = global.pausedX;
                    global.stopY = global.pausedY;
                    global.stopgrav = global.pausedgrav;
                    global.stopplayer_xscale = global.pausedplayer_xscale;
                    global.stopVspeed = global.pausedVspeed;
                    global.stopDjump = global.pausedDjump;
                }
    
                playRecord();
                escape_button_just_clicked = true;
            } break;
            
            
            case 2: //erase recording
            var tt = "Erase a currently active recording.";
            
            if (menuButton(xx,yy,w,h,"Erase",true,sMenuEraser,tt))
            {
                eraserRecord();
                global.record = 0;
                global.FrameCounterOn = false;
                global.PlayerFrameCounter = 0;
            } break
            
            
            case 3: //continue recording
            var tt = "Continue a previous recording
            (Will restart the room once pressed).";
            
            if (menuButton(xx,yy,w,h,"Continue",true,sMenuContinue,tt)) 
            {
                escape_button_just_clicked = true;
                
                if (!global.paused)
                    continueRecordAskName();
            } break;
            
            
            case 4: //save recording
            var tt = "Save a currently active recording.";
            
            if (!global.paused &amp;&amp; menuButton(xx,yy,w,h,"Save",true,sMenuSaveMap,tt)) 
            {
                saveRecordAskName();
            } break;
            
            
            case 5: //load recording
            var tt = "Load a previous recording.";
            
            if (!global.paused &amp;&amp; menuButton(xx,yy,w,h,"Load",true,sMenuOpenMap,tt)) 
            {
                loadRecordAskName();
            } break;
        }
    }
}   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map dropdowns</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///transformations
if (mode == input_maptransform) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Transformations";
    var xx = 928-136;
    var w = 130;
    var h = 32;
    
    var Jump = "[ "+scrGetKeybind(global.controls[KEY.JUMP, 0])+" ]";
    var Z = "[ "+scrGetKeybind(global.controls[KEY.SHOOT, 0])+" ]";
    var U = "[ "+scrGetKeybind(global.controls[KEY.UP, 0])+" ]";
    var R = "[ "+scrGetKeybind(global.controls[KEY.RIGHT, 0])+" ]";
    var L = "[ "+scrGetKeybind(global.controls[KEY.LEFT, 0])+" ]";
    var D = "[ "+scrGetKeybind(global.controls[KEY.DOWN, 0])+" ]";
    var AA = "[ "+scrGetKeybind(global.controls[KEY.ALIGN_LEFT, 0])+" ]";
    var AD = "[ "+scrGetKeybind(global.controls[KEY.ALIGN_RIGHT, 0])+" ]";
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {
            case 0: //dotkid
            var tt = "Toggles Dotkid.
            Hitbox is a 2x2 rectangle.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuDotkid,"[ Dotkid ]","Dotkid",global.dotkid,tt)) {
                global.dotkid = !global.dotkid;
            } break;
        
            
            case 1: //vkid
            var vkid = array_create(2);
            vkid[0] = "Blue";
            vkid[1] = "Blue";
            //vkid[2] = "Purple";
            vkid_spr = asset_get_index("sMenuVkid"+string(vkid[global.vkid]));
            
            var tt = "Toggles Vkid type.#"
            +Jump+" to flip.
            Blue Vkid flips 180-degree.
            Purple Vkid flips 90-degrees in the direction you're facing.";
            
            if (menuButtonToggle(xx,yy,w,h,true,vkid_spr,"[ "+vkid[global.vkid]+" Vkid ]","Vkid",global.vkid,tt))  
            {
                global.vkid += 1;
                
                if (global.vkid &gt; 1) 
                    global.vkid = 0;
            } break;
            
            
            case 2: //Telekid
            var tt = "Toggles Telekid.#"
            +Z+" to shoot a teleport clone.
            Collision with blocks will teleport the player.
            Collision with killers will kill the player.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuTelekid,"[ Telekid ]","Telekid",global.telekid,tt)) 
            {
                global.telekid = !global.telekid;
            } break;
        
            
            case 3: //lunarkid
            var tt = "Toggles Lunarkid / Rocket.
            Movement is based on inertia.#"
            +L+" to rotate CCW.#"
            +R+" to rotate CW.#"
            +U+" to accelerate.
            Hitbox is a 11x21 oval.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuLunarkid,"[ Lunarkid ]","Lunarkid",global.lunarkid,tt)) 
            {
                global.lunarkid = !global.lunarkid;

                with (oPlayer) {
                    gravity = 0;
                    event_user(0);
                }
            } break;
            
            
            case 4: //linekid
            var tt = "Toggles Linekid.#"
            +U+" / "+AA+" to rotate CCW.#"
            +D+" / "+AD+" to rotate CW.
            Hitbox is a 3x25 rectangle.";

            if menuButtonToggle(xx,yy,w,h,true,sMenuLinekid,"[ Linekid ]","Linekid",global.linekid,tt) 
            {
                global.linekid = !global.linekid;
                
                with (oPlayer) {
                    event_user(0);
                }
            } break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///save types
if (mode == input_mapsaves) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Save Attributes";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    var Z = "( "+scrGetKeybind(global.controls[KEY.SHOOT, 0])+" )";
    var S = "( "+scrGetKeybind(global.controls[KEY.SKIP, 0])+" )";    
    //var U = "( "+scrGetKeybind(global.controls[KEY.UP, 0])+" )";
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
    
        switch (i)
        {
            case 0: //z saves
            var tt = "Toggles saves to be used when pressing "+Z+" on them.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuSaveZ,"[ "+Z+" Saves ]",Z+" Saves",global.savetypez,tt))
            {
                global.savetypez = !global.savetypez;
            } break;
        
            
            case 1: //shoot saves
            var tt = "Toggles saves to be used when shot.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuSaveShoot,"[ Shoot Saves ]","Shoot Saves",global.savetypeshoot,tt))
            {
                global.savetypeshoot = !global.savetypeshoot;
            } break;
        
            
            case 2: //s saves
            var tt = "Toggles saves to be used when pressing "+S+" on them.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuSaveS,"[ "+S+" Saves ]",S+" Saves",global.savetypes,tt))
            {
                global.savetypes = !global.savetypes;
            } break;
            
            
            case 3: //touch saves
            var tt = "Toggles saved to be used when touched.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuSaveTouch,"[ Touch Saves ]","Touch Saves",global.savetypetouch,tt))
            {
                global.savetypetouch = !global.savetypetouch;
            } break;
            
            /*case 4: //up saves
            var tt = "Toggles saves to be used when pressing "+U+" on them.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuSaveUp,"[ "+U+" Saves ]",Up+" Saves",global.savetypeup,tt))
            {
                global.savetypeup = !global.savetypeup;
            } break;*/
        }
    }
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics options
if (mode == input_mapphysics)
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Physics Options";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {
            case 0: //infinite jump
            var tt = "Toggles infinite jump.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuInfJump,"[ Inf Jump ]","Inf Jump",global.infinitejump,tt))
            {
                global.infinitejump = !global.infinitejump;
            } break;
            
            
            case 1: //ice physics
            var ices = array_create(4);
            ices[0] = "No";
            ices[1] = "Slip";
            ices[2] = "Domu";
            ices[3] = "Pressure";
            ice_spr = asset_get_index("sMenuIce"+string(ices[global.icetype]));
            
            var tt = "Toggles ice physics.
            Slip ice is similar to slip block collision.
            Domu ice adds momentum to your max speed.
            Pressure ice (Also known as CBT ice) makes you start moving with momentum.";
            
            if (menuButtonToggle(xx,yy,w,h,true,ice_spr,ices[global.icetype]+" Ice","No Ice",global.icetype,tt))
            {
                global.icetype += 1;
                
                if (global.icetype &gt; 3) 
                    global.icetype = 0;
            } break;
        
            
            case 2: //slowshot
            var tt = "Toggles slow shot.
            Bullets move at 1 speed.
            Max bullets is 10.
            Bullets will disappear after 16 seconds.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuSlowshot,"[ Slowshot ]","Slowshot",global.slowshot,tt)) 
            {
                global.slowshot = !global.slowshot;
            } break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///border type
if (mode == input_mapborders)
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Border Attributes";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {
            case 0: //solid/death borders
            var tt = "Toggles room border type.
            Death border will kill the player on collision.
            Solid border will stop the player on collision.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuBorderCollision,"Solid Border","Death Border",global.bordertype,tt))
            {
                global.bordertype = !global.bordertype;
            } break;
                        
            
            case 1: //screenwrap borders
            var wraps = array_create(4);
            wraps[0] = "No";
            wraps[1] = "X";
            wraps[2] = "Y";
            wraps[3] = "XY";
            wrap_spr = asset_get_index("sMenuBorderWrap"+string(wraps[global.screenwraptype]))

            var tt = "Toggles screenwrap type.
            X Wrap will screenwrap the player horizontally.
            Y Wrap will screenwrap the player vertically.
            XY Wrap will screenwrap the player in both axes.";
            
            if (menuButtonToggle(xx,yy,w,h,true,wrap_spr,wraps[global.screenwraptype]+" Wrap","No Wrap",global.screenwraptype,tt)) 
            {
                global.screenwraptype += 1;
                
                if (global.screenwraptype &gt; 3) 
                    global.screenwraptype = 0;
            } break;
            
            
            case 2: //boundary box type
            /*var bboxs = array_create(3);
            bboxs[0] = "Center";
            bboxs[1] = "Far";
            bboxs[2] = "Near";
            bbox_spr = asset_get_index("sMenuBorderBBox"+string(bboxs[global.borderbox]));
        
            var tt = "Toggles border collision type.
            Center BBox will cause the player to collide on their origin.
            Far BBox will cause the player to collide on the farthest edge of their hitbox.
            Near BBox will cause the player to collide on the nearest edge of their hitbox.";
            
            if (menuButtonToggle(xx,yy,w,h,true,bbox_spr,bboxs[global.borderbox]+" BBox","Center BBox",global.borderbox,tt)) 
            {
                global.borderbox += 1; //cringe variable that doesn't fucking work idk
                
                if (global.borderbox &gt; 2) 
                    global.borderbox = 0;
            } */break;
        }
    }
}   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///interactions
if (mode == input_mapactions)
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Misc. Interactions";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1)
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {
            case 0: //dot clipping
            var tt = "Toggles Dotkid clipping.
            Sets whether or not you will be pushed out of a block when switching to and from the normal Kid.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuDotClip,"[ Dot Clip ]","Dot Clip",global.dotclip,tt)) 
            {
                global.dotclip = !global.dotclip;
            } break;
            
            
            case 1: //dot platfix
            var platfix_spr = sMenuDotPlatFix;
            if (!global.dotplatfix) 
                platfix_spr = sMenuDotNoFix;
            
            var tt = "Toggles Dotkid platform fix.
            Sets whether or not you will properly collide with platforms as Dotkid.";
                
            if (menuButtonToggle(xx,yy,w,h,true,platfix_spr,"[ Dot Platfix ]","Dot Platfix",global.dotplatfix,tt)) 
            {
                global.dotplatfix = !global.dotplatfix;
            } break;
            
            
            case 2: //tele range
            var telerange_spr = sMenuTeleRangeFar;
            if (!global.telerange)
                telerange_spr = sMenuTeleRangeClose;
                
            var tt = "Toggles Telekid range.
            Sets whether or not you can shoot a clone when you are within 12 pixels of a wall.";
                
            if (menuButtonToggle(xx,yy,w,h,true,telerange_spr,"[ Tele Range ]","Tele Range",global.telerange,tt)) 
            {
                if (global.telerange = 12) 
                    global.telerange = 0;
                else if (global.telerange = 0) 
                    global.telerange = 12;
            } break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>preference dropdowns</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player options
if (mode == input_prefplayer) 
{   
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Player Preferences";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {
            case 0: //death type
            var death = array_create(3);
            death[0] = "No";
            death[1] = "";
            death[2] = "Hit";
            death[3] = "Reset";
            var death_spr = asset_get_index("sMenuDeath"+string(death[global.deathEnabled]));
            
            var tt = "Toggles death type.
            No death will only cause killers to be highlighted on collision.
            Death will cause you to explode on collision with killers.
            Hit Death will cause you to be hit and become intangible on collision with killers.
            Reset Death will cause the room to immediately reste on collision with killers.";
            
            if (menuButtonToggle(xx,yy,w,h,true,death_spr,"[ "+string(death[global.deathEnabled]+" Death ]"),string(death[1])+" Death",global.deathEnabled,tt)) 
            {
                global.deathEnabled += 1;
                
                if (global.deathEnabled &gt; 3) 
                    global.deathEnabled = 0;
                    
                saveConfig();
            } break;
        
            
            case 1: //show hitbox
            var hitbox = array_create(3);
            hitbox[0] = "Hide";
            hitbox[1] = "Show";
            hitbox[2] = "Only";
            hitbox_spr = asset_get_index("sMenuHitbox"+string(hitbox[global.showhitbox]));
            
            var tt = "Toggles player hitbox opacity.
            Hide hitbox will display the player normally.
            Show hitbox will display your hitbox at low opacity.
            Only hitbox will replace the player with a hitbox.";
            
            if (menuButtonToggle(xx,yy,w,h,true,hitbox_spr,"[ "+hitbox[global.showhitbox]+" Hitbox ]",string(hitbox[1])+" Hitbox",global.showhitbox,tt)) 
            {
                global.showhitbox += 1;
                
                if (global.showhitbox &gt; 2) 
                    global.showhitbox = 0;
                    
                saveConfig();
            } break;
        
            
            case 2: //dot outline
            var tt = "Toggles Dotkid outline.
            Sets whether or not to draw a rectangle around the player's position while Dotkid is active.
            Useful for seeing where the player currently is more easily.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuDotOutline,"[ Dot Outline ]","Dot Outline",global.dotkidoutline,tt))
            {
                global.dotkidoutline = !global.dotkidoutline;
                saveConfig();
            } break;
            
            
            case 3: //save subpixel
            var subpx_spr = sMenuSaveSubpixel;
            if (!global.savesubpixel) 
                subpx_spr = sMenuFloorSubpixel;
                
            var tt = "Toggles saving subpixels.
            Sets whether or not to floor the player's X and Y subpixels on restart.";
            
            if (menuButtonToggle(xx,yy,w,h,true,subpx_spr,"[ Save Subpx ]","Save Subpx",global.savesubpixel,tt)) 
            {
                global.savesubpixel = !global.savesubpixel;
                saveConfig();
            } break;
        }
    }
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///screen options
if (mode == input_prefscreen) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1)
    var head = "Set Screen Preferences";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i) 
        {
            case 0: //fullscreen
            var window_spr = sMenuFullscreen;
            if (window_get_fullscreen()) 
                window_spr = sMenuWindowed;
                
            var tt = "Toggles fullscreen mode.";
                
            if (menuButtonToggle(xx,yy,w,h,true,window_spr,"[ Fullscreen ]","Fullscreen",window_get_fullscreen(),tt)) {
                window_set_fullscreen(!window_get_fullscreen());
                oWorld.alarm[0] = 1;
                completelyResetZoom();
                saveConfig();
            } break;
        
            
            case 1: //hide sidebar
            var sidebar_spr = sMenuSidebarClose;
            if (global.hidesidebar) 
                sidebar_spr = sMenuSidebarOpen;
                
            var tt = "Toggles the sidebar.";
                
            if (menuButtonToggle(xx,yy,w,h,true,sidebar_spr,"Show Sidebar","Hide Sidebar",global.hidesidebar,tt)) {
                global.hidesidebar = !global.hidesidebar;
                saveConfig();
            } break;
        
            
            case 2: //mouse coords
            var tt = "Toggles mouse coordinates display.
            Sets whether or not to display the mouse cursor's position.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuCoords,"[ Coordinates ]","Coordinates",global.mousecoords,tt)) {
                global.mousecoords = !global.mousecoords;
                saveConfig();
            } break;
            
            
            case 3: //grid draw
            var tt = "Toggles drawing the grid overlay.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuGrid,"Grid: "+string(global.grid_draw),"Grid: off",global.grid_draw != 0,tt)) {
                if (!global.grid_sync) {
                    switch (global.grid_draw) {
                        case 0: global.grid_draw = 32; break;
                        case 32: global.grid_draw = 16; break;
                        case 16: global.grid_draw = 8; break;
                        case 8: global.grid_draw = 4; break;
                        case 4: global.grid_draw = 2; break;
                        default: global.grid_draw = 32; break;
                    }
                } else {
                    if (global.grid_draw != 0) 
                        global.grid_draw = 0;
                    else 
                        global.grid_draw = oEdit.snap;
                }
                
                oDrawGrid.needToRedrawSurf = true;
                saveConfig();
            } break
            
            
            case 4: //grid sync
            var gridsync_spr = sMenuGridSync;
            if (!global.grid_sync) 
                gridsync_spr = sMenuGridDesync;
                
            var tt = "Toggles grid sync.
            Sets whether or not the grid overlay is synced with the current grid snap.";
                
            if (menuButtonToggle(xx,yy,w,h,true,gridsync_spr,"[ Grid Sync ]","Grid Sync",global.grid_sync,tt)) {
                global.grid_sync = !global.grid_sync;
                saveConfig();
            } break;
        }
    }
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///system options
if (mode == input_prefsystem) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set System Preferences";
    var xx = 928-130;
    var w = 130;
    var h = 32;
    
    for (var i = 0; i &lt; 7; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        switch (i)
        {        
            case 0: //water lock
            var waterlock_spr = sMenuWaterUnlock;
            if (global.waterlocked) 
                waterlock_spr = sMenuWaterLock;
                
            var tt = "Toggles water locking.
            Sets whether or not you can delete water.";
                
            if (menuButtonToggle(xx,yy,w,h,true,waterlock_spr,"[ Lock Water ]","Lock Water",global.waterlocked,tt)) {
                global.waterlocked = !global.waterlocked;
            } break;
        
            
            case 1: //hotkey lock
            var hotkey = array_create(3);
            hotkey[0] = "Unlock";
            hotkey[1] = "Lock";
            hotkey[2] = "Fixed";
            hotkey_spr = asset_get_index("sMenuHotkey"+string(hotkey[global.hotkeylock]));
            
            var tt = "Toggles hotkey lock type.
            Unlocked allows you to freely use V, F, G and H.
            Locked only allows you to use the hotkeys while holding Control.
            Fixed makes the hotkeys inaccessible.";
            
            if (menuButtonToggle(xx,yy,w,h,true,hotkey_spr,"[ "+hotkey[global.hotkeylock]+" Keys ]","Lock Keys",global.hotkeylock,tt)) {
                global.hotkeylock += 1;
                
                if (global.hotkeylock &gt; 2) 
                    global.hotkeylock = 0;
                saveConfig();
            } break;
            
            
            case 2: //air saving
            var airsave_spr = sMenuAirSave;
            if (!global.airsaving) 
                airsave_spr = sMenuFloorSave;
                
            var tt = "Toggles saving in the air.
            Sets whether or not you can press S to save in the air.
            You cannot press S to save while standing on a save.";
            
            if (menuButtonToggle(xx,yy,w,h,true,airsave_spr,"[ Air Saving ]","Air Saving",global.airsaving,tt)) {
                global.airsaving = !global.airsaving;
                saveConfig();
            } break;
            
            
            case 3: //global time
            var tt = "Toggles persistent global timer.
            Sets whether or not the global time will persist on restart.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuTimer,"[ Global Time ]","Global Time",global.worldtime,tt)) {
                global.worldtime = !global.worldtime;
                saveConfig();
            } break;
            
            
            case 4: //toggle backups
            var tt = "Toggles backup maps.
            Sets whether or not to create a backup of the current map every 5 minutes.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuPrefsBackup,"[ Backups ]","Backups",global.backup,tt)) {
                global.backup = !global.backup;
                saveConfig();
            } break;
            
            
            case 5: //toggle update check
            var tt = "Toggles update checking.
            Sets whether or not to automatically install available updates.";
            
            if (menuButtonToggle(xx,yy,w,h,true,sMenuPrefsUpdate,"[ Updates ]","Updates",global.checkupdates,tt)) {
                global.checkupdates = !global.checkupdates;
                saveConfig();
            } break;
        }
    }
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///depth order
if (mode == input_prefdepth) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Depth Order";
    draw_text(928, 304-back_h/2+50,"Front");
    draw_text(928, 304+back_h/2-87,"Back");
    
    var labelX = 928-100;
    var spritesX = 928-40;
    var buttonX = 928+85;
    
    var orderChanged = false;
    var h = 50;
    
    for (var i = 0; i &lt; ds_list_size(global.depthList); i+=1) 
    {
        var yy = 304-back_h/2+70+i*(h+10);
        var text;
        var spritesY = yy+7;
        
        switch (ds_list_find_value(global.depthList, i))
        {
            case depthorder_block:
               text = "blocks";
               draw_sprite(sEditBlock, 0, spritesX, spritesY);
               draw_sprite(sVineR, 0, spritesX+64-24+4, spritesY);
               break;
               
            case depthorder_spike:
               text = "spikes";
               draw_sprite_ext(sSpikeUp, 0, spritesX, spritesY, 1, 1, 0, global.color_killer, 1);
               draw_sprite_ext(sApple, 0, spritesX+52, spritesY+16, 1, 1, 0, global.color_killer, 1);
               break;
               
            case depthorder_water:
               text = "water";
               draw_sprite(sWater2, 0, spritesX, spritesY);
               draw_sprite(sWater3, 0, spritesX+40, spritesY);
               break;
               
            case depthorder_player:
               text = "player";
               draw_sprite(sPlayerIdle, 0, spritesX+16, spritesY+20);
               draw_sprite(sSave, 0, spritesX+32, spritesY);
               draw_sprite(sJumpRefresher, 0, spritesX+80, spritesY+16);
               break;
        }
        fontSetup(global.systemfont, c_black, fa_left, fa_top, 1);
        draw_text(labelX,yy+10,text);
        
        if (i != 0) {
            var bx = buttonX;
            var by = yy;
            var bw = 30;
            var bh = 20;
            if (menuButton(bx,by,bw,bh,"",true,false)) {
                if (ds_list_find_value(global.depthList, i-1) == depthorder_player
                    &amp;&amp; (ds_list_find_value(global.depthList, i) == depthorder_spike
                    || ds_list_find_value(global.depthList, i) == depthorder_block)) {
                    instance_create(528+back_w/2+16,304-50,oDepthOrderPlayerHint);
                }
                else {
                    var val = ds_list_find_value(global.depthList, i);
                    ds_list_delete(global.depthList, i);
                    ds_list_insert(global.depthList, i-1, val);
                    orderChanged = true;
                }
            }
            draw_sprite(sDepthArrowUp,0,bx+bw/2,by+bh/2);
        }
        
        if (i != ds_list_size(global.depthList)-1) {
            var bx = buttonX;
            var by = yy+19;
            var bw = 30;
            var bh = 20;
            if (menuButton(bx,by,bw,bh,"",true,false)) {
                if (ds_list_find_value(global.depthList, i) == depthorder_player
                    &amp;&amp; (ds_list_find_value(global.depthList, i+1) == depthorder_spike
                    || ds_list_find_value(global.depthList, i+1) == depthorder_block)) {
                    instance_create(528+back_w/2+16,304-50,oDepthOrderPlayerHint);
                }
                else {
                    var val = ds_list_find_value(global.depthList, i);
                    ds_list_delete(global.depthList, i);
                    ds_list_insert(global.depthList, i+1, val);
                    orderChanged = true;
                }
            }
            draw_sprite_ext(sDepthArrowUp,0,bx+bw/2,by+bh/2,1,-1,0,c_white,1);
        }
    }
    
    if (orderChanged) {
        saveConfig();
        updatePaletteDepths();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control binds
if (mode == input_prefctrls) 
{
    fontSetup(global.systemfont, c_black, fa_center, fa_top, 1);
    var head = "Set Control Binds";
    var buttons_enabled = true;
    var xx = 928-130;
    var w = 65;
    var h = 32;
    
    for (var i = 0; i &lt; numberOfKeys; i+=1) 
    {
        var yy = 304-back_h/2+41+i*(h+8);
        var text;
        
        if (menuButton(xx,yy,w,h,bindName[i],buttons_enabled,false)) {
            
        }
    }
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>system</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///overlay setup
var xx = 928-back_w/2;
var yy = 304-back_h/2;
var w = back_w-1;
var h = 33;

if (mode &gt;= input_fileformat &amp;&amp; mode &lt;= input_prefctrls)
{
    for (i = 0; i &lt; 2; i+=1)
    {
        if (i = 1)
        {
            yy = (304+back_h/2)-53;
        }
        
        draw_set_color(c_white);
        draw_rectangle(xx,yy,xx+w,yy+(h+(i*19)),0);
        
        draw_set_color(c_black);
        draw_rectangle(xx,yy,xx+w,yy+(h+(i*19)),1);
    }
    draw_text(928,304-back_h/2+(h/2),head);
    
    // Ok button
    var button_yo = 145;
    var button_w = 90;
    var button_h = 32;
    if (menuButton(928-button_w/2,304+button_yo,button_w,button_h,"Ok",true,false) || keyboard_check_pressed(vk_enter)) {
        inputOverlayYes();
    }
    
    if (mode == input_prefdepth)
    {
        var bw = 20;
        var bh = 20;
        if (menuButton(928-back_w/2,304-back_h/2,bw,bh,"",true,false)) {
            oWakahaEasterEgg.visible = !oWakahaEasterEgg.visible;
        }
    }
}
draw_text(928,304+label_yo,label);

// X button
var xbutton_height = 25;
var xbutton_width = 41;
var bx = 928+back_w/2-xbutton_width;
var by = 304-back_h/2;
if (menuButton(bx, by, xbutton_width, xbutton_height, "", true, false)) {
    inputOverlayCancel();
}
var lsy = 4;
var lsx = 12;
draw_line(bx+lsx,by+lsy,bx+xbutton_width-lsx-2,by+xbutton_height-lsy-2);
draw_line(bx+lsx,by+lsy+1,bx+xbutton_width-lsx-2,by+xbutton_height-lsy-2+1);
draw_line(bx+lsx,by+xbutton_height-lsy-2,bx+xbutton_width-lsx-2,by+lsy);
draw_line(bx+lsx,by+xbutton_height-lsy-2+1,bx+xbutton_width-lsx-2,by+lsy+1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///yes / no
if (mode == input_yesno) 
{
    var button_yo = 15;
    var button_w = 80;
    var button_h = 32;
    var button_space = 12;
    
    var xx1 = 928-(button_w*1.5+button_space);
    var xx2 = 928-button_w/2;
    var xx3 = 928+button_w/2+button_space;
    var yy = 304+button_yo;
    if (menuButton(xx1,yy,button_w,button_h,"Yes",true,false) || keyboard_check_pressed(vk_enter)) {
        inputOverlayYes();
    }
    if (menuButton(xx2,yy,button_w,button_h,"No",true,false)) {
        inputOverlayNo();
    }
    if (menuButton(xx3,yy,button_w,button_h,"Cancel",true,false)) {
        inputOverlayCancel();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///info
if (mode == input_info) 
{
    var button_yo = 15;
    var button_w = 90;
    var button_h = 32;
    if (menuButton(928-button_w/2,304+back_h/2-button_h-button_yo,button_w,button_h,'Ok',true,false) || keyboard_check_pressed(vk_enter)) {
        inputOverlayYes();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///about
if (mode == input_about) 
{
    fontSetup(global.systemfont,c_black,fa_center,fa_top,1);
    draw_text(928,304-260,"jtool version "+global.version_string
    +"#record version 1.1#"
    +"#made by Patrickgh3"
    +"#original record mod by Cube"
    +"#j2l expansion by RedBatNick and KingSlendy#"
    +"#Special thanks:"
    +"#YoYoYoDude1 for his studio engine"
    +"#Thenewgeezer for the original RMJ"
    +"#Klazen108 for adding object code"
    +"#Redire for making additional features"
    +"#Starz0r for making additional features"
    +"#DuckNumbers for the original TAS mode"
    +"#Syfactor26 for the Many Spikes Mod"
    +"#Chen233 for the advanced input overlay"
    +"#people who gave feedback and feature ideas"
    +"#Various other makers for their own 'X'tool mods"
    
    +"##Please read readme.html for more info!");
    
    draw_sprite(sIcon32, 1, 928-105, 304-263);
    
    var button_w = 130;
    var button_h = 32;
    /*if menuButton(391-button_w/2,304+170,button_w,button_h,"Forum thread",true,false) {
        var _url = "https://www.iwannacommunity.com/forum/index.php?topic=1964.0";
        var _path = game_save_id + "/shortcut.url";
        var _txt = file_text_open_write(_path);
        file_text_write_string(_txt, "[{000214A0-0000-0000-C000-000000000046}]
        Prop3=19,11
        [InternetShortcut]
        IDList=
        URL=" + _url);
        file_text_close(_txt);
        execute_shell_simple(_path);
    }*/
    
    if menuButton(928-button_w/2,304+170,button_w,button_h,"I Wanna Hub",true,false) {
        execute_shell_simple("C:\Windows\System32\cmd.exe", "/c /q start https://trello.com/b/9smEejFq/i-wanna-hub")
        /*var _url = "https://trello.com/b/9smEejFq/i-wanna-hub";
        var _path = game_save_id + "/shortcut.url";
        var _txt = file_text_open_write(_path);
        file_text_write_string(_txt, "[{000214A0-0000-0000-C000-000000000046}]
        Prop3=19,11
        [InternetShortcut]
        IDList=
        URL=" + _url);
        file_text_close(_txt);
        execute_shell_simple(_path);*/
    }
    
    /*if menuButton(665-button_w/2,304+170,button_w,button_h,"Patrick"s tools",true,false) {
        var _url = "https://cwpat.me/iwanna-tools/";
        var _path = game_save_id + "/shortcut.url";
        var _txt = file_text_open_write(_path);
        file_text_write_string(_txt, "[{000214A0-0000-0000-C000-000000000046}]
        Prop3=19,11
        [InternetShortcut]
        IDList=
        URL=" + _url);
        file_text_close(_txt);
        execute_shell_simple(_path);
    }*/
    
    var button_w = 90;
    if (menuButton(928-button_w/2,304+230,button_w,button_h,"Ok",true,false)) {
        inputOverlayYes();
    }
    
    var bw = 20;
    var bh = 20;
    if (menuButton(928+back_w/2-bw,304+back_h/2-bh,bw,bh,"",true,false)) {
        global.joketitleindex += 1;
        updateCaption();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///new version
if (mode == input_newversion)
{
    var button_yo = 25;
    var button_w = 110;
    var button_h = 32;
    if (menuButton(928-button_w/2,304+button_yo,button_w,button_h,'Github repo',true,false) || keyboard_check_pressed(vk_enter)) {
        inputOverlayYes();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///final setup
if (keyboard_check_pressed(vk_escape)) {
    inputOverlayCancel();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// don't draw sprite
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
