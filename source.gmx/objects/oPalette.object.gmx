<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorPalette</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-120</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>combobox_selected = false

/*
    xx - x coordinate of the button location
    yy - y coordinate of the button location
    spr - sprite to draw
    obj - object to select if clicked
    off - offset to draw sprite at if origin is not centered
    killer - whether or not to draw the object with the killer tint
*/

palette = ds_list_create();

//hybrid page

    //1st row
    newPaletteObject(oSpikeUp, 
    cyclePaletteObjects(oSpikeRight,oSpikeDown,oSpikeLeft), 
    true, "Spike", false);
    
    newPaletteObject(oMiniSpikeUp,
    cyclePaletteObjects(oMiniSpikeRight,oMiniSpikeDown,oMiniSpikeLeft),
    true, "Mini Spike", false);
    
    newPaletteObject(oApple,
    undefined,
    true, "Fruit", false);
    
    newPaletteObject(oKillerBlock,
    cyclePaletteObjects(oMiniKillerBlock), 
    true, "Killer Block", false);
    
    
    //2nd row
    newPaletteObject(oEditBlock,
    cyclePaletteObjects(oEditMiniBlock), 
    false, "Block", false);
    
    newPaletteObject(oSlipBlock,
    undefined,
    false, "Platform", false)
    
    newPaletteObject(oSlope,
    cyclePaletteObjects(oSlopeUpRight,oSlopeUpLeft,oSlopeDownLeft,oSlopeDownRight),
    false, "Slip Block", false);
    
    newPaletteObject(oSlideBlockR,
    cyclePaletteObjects(oSlideBlockD,oSlideBlockL,oSlideBlockU), 
    false, "Conveyors", false);
    
    
    //3rd row
    newPaletteObject(oPlatform,
    cyclePaletteObjects(oPlatformSideways),
    false, "Platform", false);
 
    newPaletteObject(oPlatform,
    cyclePaletteObjects(oPlatformSideways),
    false, "Snapless Platform", false);
    /*newPaletteObject(oSnaplessPlatform,
    cyclePaletteObjects(oSnaplessPlatformSideways),
    false, "Snapless Platform", false);*/
    
    newPaletteObject(oSnapform,
    cyclePaletteObjects(oSnapformSideways),
    false, "Snapform", false);
    
    newPaletteObject(oDisappearPlatform,
    cyclePaletteObjects(oDisappearPlatformSideways),
    false, "Disappear Platform", false);
    
    
    //4th row
    newPaletteObject(oSave, 
    cyclePaletteObjects(oSaveFlip),
    false, "Save", false);
    
    newPaletteObject(oPlayerStart,
    cyclePaletteObjects(oWarp), 
    false, "Player Start", false);
    
    newPaletteObject(oWarp,
    cyclePaletteObjects(oPlayerStart),
    false, "Goal", false);
    
    newPaletteObject(oBulletBlocker,
    cyclePaletteObjects(oAlignMarker), 
    false, "Bullet Blocker", false);
    
    
    //5th row
    newPaletteObject(oWater,
    cyclePaletteObjects(oWater2,oWater3,oWaterNekoron,oWaterCatharsis,oWaterDisappear), 
    false, "Water", false);
    
    newPaletteObject(oVineR,
    cyclePaletteObjects(oVineL), 
    false, "Vine", false);
    
    /*newPaletteObject(oJumpRefresher,
    undefined, 
    false, "Jump Refresher", false);*/
    
    newPaletteObject(oShootRefresherR,
    cyclePaletteObjects(oShootRefresherL),
    false, "Shoot Refresher", false);
    
    newPaletteObject(oGravityArrowDown,
    cyclePaletteObjects(oGravityArrowUp), 
    false, "Gravity Arrow", false);
    
//palette page
/*
    //water
    newPaletteObject(oWater,
    undefined,
    false, "Water1", false, "Water");
    
    newPaletteObject(oWater2,
    undefined,
    false, "Water2", false, "Water");
    
    newPaletteObject(oWater3,
    undefined,
    false, "Water3", false, "Water");
    
    newPaletteObject(oWaterNekoron,
    undefined,
    false, "Nekoron Water", false, "Water");
    
    newPaletteObject(oWaterCatharsis,
    undefined,
    false, "Catharsis Water", false, "Water");
    
    newPaletteObject(oWaterDisappear,
    undefined,
    false, "Disappear Water", false, "Water");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(palette);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (i = 0; i &lt;= 9; i+=1)
{
    if (keyboard_check_pressed(ord(string(i))))
    {
        if ( global.state == globalstate_idle ) {
            if oEdit.selected_object = objs[buttonCount] {
                with (oEdit) { controlObject('select', 1); }    
            } else {
                selectEditObject( buttonCount );
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.sidebarstate == sidebar_analysis or global.hidesidebar exit

if combobox_selected and global.state != globalstate_idle {
    combobox_selected = false
    global.comboboxselected = false
}

var xo = 0
var w = 50
dx = w+8

var yo = 0
var h = 50
dy = h+8
var tooltip_to_draw = ''

for (var i = 0; i &lt; ds_list_size(palette); i += 1) {
    /*
        xx - x coordinate of the button location
        yy - y coordinate of the button location
        spr - sprite to draw
        obj - object to select if clicked
        off - offset to draw sprite at if origin is not centered
        killer - whether or not to draw the object with the killer tint
    */
    
    var obj_palette = palette[| i];
    var xx = i mod 4;
    var yy = i div 4;
    var obj = obj_palette[? "Object"];
    var spr = object_get_sprite(obj);
    var killer = obj_palette[? "Killer"];
    var tooltip = obj_palette[? "ToolTip"];
    var combo = obj_palette[? "Combo"];

    var in_combobox = yy == 5// or yy == 6 or yy==7
    if in_combobox and not combobox_selected continue
    
    // draw button backing and sprite
    var xxx = x+xo+xx*dx
    var yyy = y+yo+yy*dy
    drawButton(xxx,yyy,w,h,false)
    
    var color = c_white
    if killer color = global.color_killer
    
    //draw object animations
    var skinnable = global.skinnable_objects[? object_get_name(obj)];
    var animspeed = skinnable[? "Speed"];
    
    if (animspeed == undefined) {
        animspeed = 1;
    }
    
    var frame = floor((global.count % (sprite_get_number(spr) / animspeed)) * animspeed);

    //draw_sprite_ext(spr,frame,xxx+w/2-off,yyy+h/2-off,1,1,0,color,1)
    draw_sprite_ext(spr,frame,xxx+w/2-sprite_get_width(spr)/2+sprite_get_xoffset(spr),yyy+h/2-sprite_get_height(spr)/2+sprite_get_yoffset(spr),1,1,0,color,1)
    
    // draw highlight and set tooltip
    var button_highlighted = point_in_rect(mouse_x,mouse_y,xxx,yyy,xxx+w,yyy+h)
        and (not global.comboboxselected or in_combobox)
        and global.state == globalstate_idle
    
    if button_highlighted {
        draw_set_alpha(global.buttonhoveralpha)
        draw_set_color(global.color_buttonhover)
        draw_rectangle(xxx+1,yyy+1,xxx+w-2,yyy+h-2,false)
        if global.buttonhoverborder {
            draw_set_alpha(0.3)
            draw_set_color(c_black)
            draw_rectangle(xxx-1,yyy-1,xxx+w,yyy+h,true)
        }
        if tooltip != '' {
            tooltip_to_draw = tooltip
        }
    }
    
    // pressing button
    var is_comboboxtoggle = combo == true
    if button_highlighted {
        if mouse_check_button_pressed(mb_left) {
            with (oEdit) {
                selected_object = obj;
                selected_sprite = spr;
                selected_killer = killer;
                selected_index = i;
                selected_cycle = 0;
            }

            var flash = instance_create(xxx,yyy,oPaletteButtonFlash);
            flash.w = w
            flash.h = h
        }
        if mouse_check_button_pressed(mb_right) and is_comboboxtoggle {
            combobox_selected = not combobox_selected
            global.comboboxselected = combobox_selected
        
            var flash = instance_create(xxx,yyy,oPaletteButtonFlash);
            flash.w = w
            flash.h = h
        }
    }
    
    // draw combo box back and detect mouse leave
    if is_comboboxtoggle and combobox_selected {
        var combo_x = x+xo-8
        var combo_y = y+yo+(yy+1)*dy-9
        var combo_w = dx*4+8
        var combo_h = dy*combo+9
        
        drawButton(combo_x,combo_y,combo_w,combo_h,false)
        drawButton(xxx,yyy,w,combo_y-yyy+1,false)
        draw_set_color(global.color_button)
        draw_line(xxx,combo_y,xxx+w-2,combo_y)
        
        if not point_in_rect(mouse_x,mouse_y,combo_x,yyy,combo_x+combo_w,combo_y+combo_h) {
            combobox_selected = false
            global.comboboxselected = false
        }
    }
}

if tooltip_to_draw != '' {
    draw_set_font(font_small)
    var w = string_width(tooltip_to_draw)+10
    var xx = min(mouse_x, room_width-5-w)
    menuButton(xx, mouse_y+20, w, 25, tooltip_to_draw, false, false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {
  
if( oEdit.selected_object = oKillerBlock ) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 3 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

if( oEdit.selected_object == oVineR ) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 13 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

var o = oEdit.selected_object;
if( o == oWater || o == oWater2 || o == oWater3 || o == oWaterNekoron || o == oWaterCatharsis) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 12 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

var o = oEdit.selected_object;
if ( o == oApple || o == oEggplant || o == oBanana ) {
    with ( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 2 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

if( oEdit.selected_object == oPlatform ) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 5 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

if (oEdit.selected_object == oSave) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 8 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

var o = oEdit.selected_object;
if( o == oMiniSpikeLeft || o == oMiniSpikeUp || o == oMiniSpikeRight || o == oMiniSpikeDown ) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 1 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

var o = oEdit.selected_object;
if( o == oSpikeLeft || o == oSpikeUp || o == oSpikeRight || o == oSpikeDown ) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 0 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {

var o = oEdit.selected_object;
if( o == oEditBlock || o == oEditMiniBlock || o = oSlipBlock ) {
    with( oEdit ) { controlObject('selectNext'); }
} else {
    selectEditObject( 4 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.state == globalstate_idle ) {
    
if( oEdit.selected_object == oPlayerStart ) {
    with( oEdit ) { controlObject('selectNext'); }//selectNextObject(); }
} else {
    selectEditObject( 9 );
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
