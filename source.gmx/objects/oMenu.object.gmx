<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-150</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu_height = 260;//200
x = 0;
y = -menu_height;
steps_in_menu = 0;
steps_out_of_menu = 0;
yspeed = 0;
escape_button_just_clicked = false;

global.stopX = -1;
global.stopY = 0;
global.stopgrav = 0;
global.stopplayer_xscale = 0;

Background = sprite_add("Screenie.png", 0, false, true, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>continueRecordBegin();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>steps_out_of_menu += 1;

if ((keyboard_check_pressed(vk_escape) || escape_button_just_clicked)
&amp;&amp; global.state == globalstate_menu &amp;&amp; steps_in_menu &gt; 0) {
    global.state = globalstate_idle;
    steps_out_of_menu = 0;
    restoreZoom();
}

if (global.state == globalstate_menu) {
    var dy = (0-y)*0.25;
    if dy &gt; 1 y = floor(y + dy);
    steps_in_menu += 1;
}
else if (global.state == globalstate_idle) {
    y += (-(menu_height+40)-y)*0.1;
    if y &lt; -menu_height y = -menu_height;
    steps_in_menu = -1;
}

escape_button_just_clicked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_stretched(sMenu,0,0,y-(sprite_get_height(sMenu)-menu_height), 800, 320);

var buttons_enabled = global.state == globalstate_menu &amp;&amp; steps_in_menu &gt; 0;
var w = 130;
var h = 32;
var dx = 140;
var dy = 40;
var dx2 = 40;
var xo = 24;
var yo = 52;


//FILE
var xx = x+xo;
var yy = y+yo;
menuSection(xx,yy,"File",false);
//


// open map
var clicked = menuButton(xx,yy,w,h,"Open Map",buttons_enabled,sMenuOpenMap);
var shortcut = keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("O"));
if (clicked || shortcut) {
    if (!oEdit.undo_nochanges) {
        inputOverlay(input_yesno,inputCallback_LoadMap,
        "Map has been modified. Save changes?");
    }
    else 
    {
        global.input_bool = false;
        global.input_cancel = false;
        inputCallback_LoadMap();
    }
}

// save map
yy += dy;
var clicked = menuButton(xx,yy,w,h,"Save Map",buttons_enabled,sMenuSaveMap);
var shortcut = keyboard_check(vk_control) and keyboard_check_pressed(ord("S"));
if (clicked || shortcut) {
    if (window_get_fullscreen()) {
        window_set_fullscreen(false);
        oWorld.alarm[0] = 1;
        oWorld.alarm[1] = 2;
    }
    else 
    { 
        saveMapAskName(); 
    }
}

// clear map 
yy += dy;
if ((menuButton(xx,yy,w,h,"Clear Map (F2)",buttons_enabled,sMenuClearMap)
|| keyboard_check_pressed(vk_f2)) &amp;&amp; !global.paused) {
    if (!oEdit.undo_nochanges) {
        inputOverlay(input_yesno,inputCallback_ClearMap,
        "Map has been modified. Save changes?");
    }
    else 
    {
        global.input_bool = false;
        global.input_cancel = false;
        inputCallback_ClearMap();
    }
}

// map formatting
yy += dy;
if (menuButton(xx,yy,w,h,"Other Formats",buttons_enabled,sMenuRMJMap)) {
    inputOverlay(input_fileformat, false, "");
}

//recording
yy += dy;
if (menuButton(xx,yy,w,h,"Recording",buttons_enabled,sMenuRecording)) {
    inputOverlay(input_filerecord, false, "");
}


//MAP
xx += dx+dx2;
yy = y+yo;
menuSection(xx,yy,"Map",true);
//

// transformations
if (menuButton(xx,yy,w,h,"Transforms",buttons_enabled,sMenuTransform)) {
    inputOverlay(input_maptransform, false, "");
}

// save types
yy += dy;
if (menuButton(xx,yy,w,h,"Save Types",buttons_enabled,sMenuSavePoint)) {
    inputOverlay(input_mapsaves, false, "");
}

// physics options
yy += dy;
if (menuButton(xx,yy,w,h,"Physics",buttons_enabled,sMenuPhysics)) {
    inputOverlay(input_mapphysics, false, "");
}

// border type
yy += dy;
if (menuButton(xx,yy,w,h,"Borders",buttons_enabled,sMenuBorder)) {
    inputOverlay(input_mapborders, false, "");
}

// interactions
yy += dy;
if (menuButton(xx,yy,w,h,"Interactions",buttons_enabled,sMenuInteractions)) {
    inputOverlay(input_mapactions, false, "");
}


//PREFERENCES
xx += dx+dx2;
yy = y+yo;
menuSection(xx,yy,"Preferences",true);
//


// player options
if (menuButton(xx,yy,w,h,"Player",buttons_enabled,sMenuPrefsPlayer)) {
    inputOverlay(input_prefplayer, false, "");
}

// screen options
yy += dy;
if (menuButton(xx,yy,w,h,"Screen",buttons_enabled,sMenuPrefsScreen)) {
    inputOverlay(input_prefscreen, false, "");
}

// system options
yy += dy;
if (menuButton(xx,yy,w,h,"System",buttons_enabled,sMenuPrefsSystem)) {
    inputOverlay(input_prefsystem, false, "");
}

// button binds
yy += dy;
if menuButton(xx,yy,w,h,"Controls",buttons_enabled,false) {
    inputOverlay(input_prefctrls, false, "")
}

// position shift
yy += dy;
if menuButton(xx,yy,w,h,"Shift Position",buttons_enabled,false) {
    inputOverlay(input_position, false, "")
}

// change skin
xx += dx-1;
yy = y+yo;
var m = menuButtonTwoPart(xx,yy,w,h,"Change Skin",buttons_enabled,sMenuSkin);
if (m != 0) {
    cycleSkin((m-1)*2-1);
}

// depth
yy += dy;
if (menuButton(xx,yy,w,h,"Depth Order",buttons_enabled,sMenuDepth)) {
    inputOverlay(input_prefdepth, false, "");
}

// shift all objects
var sw = 18;
var sh = 18;
var sdy = 12;
var sdx = 25;
xx += dx+dx2;
yy = y+yo*2;

xx += sdx;
var tt = "Shift all objects Right by current grid snap.";
if (menuButton(xx, yy, sw, sh, "&gt;", buttons_enabled, 0, tt)) {
    with (oEdit) { clearUndoStack(); }
    with (all) {
        if (objectInPalette(object_index) || object_index = oPlayer)
            x += oEdit.snap;
    }
}
xx -= sdx;
yy += sdy;
var tt = "Shift all objects Down by current grid snap.";
if (menuButton(xx, yy, sw, sh, "v", buttons_enabled, 0, tt)) {
    with (oEdit) { clearUndoStack(); }
    with (all) {
        if (objectInPalette(object_index) || object_index = oPlayer)
            y += oEdit.snap;
    }
}
yy -= sdy*2;
var tt = "Shift all objects Up by current grid snap.";
if (menuButton(xx, yy, sw, sh, "^", buttons_enabled, 0, tt)) {
    with (oEdit) { clearUndoStack(); }
    with (all) {
        if (objectInPalette(object_index) || object_index = oPlayer)
            y -= oEdit.snap;
    }
}
xx -= sdx;
yy += sdy;
var tt = "Shift all objects Left by current grid snap.";
if (menuButton(xx, yy, sw, sh, "&lt;", buttons_enabled, 0, tt)) {
    with (oEdit) { clearUndoStack(); }
    with (all) {
        if (objectInPalette(object_index) || object_index = oPlayer)
            x -= oEdit.snap;
    }
}

// close menu
var xw = 800;
//if (global.hidesidebar) { xw = 800; }
//else { xw = 1056; }

xx = xw-w-8;
yy = y+12;
if (menuButton(xx,yy,w,h,"Close Menu (Esc)",buttons_enabled,false) 
|| (buttons_enabled &amp;&amp; mouse_y &gt; y+menu_height &amp;&amp; mouse_check_button_pressed(mb_left))) {
    escape_button_just_clicked = true;
}

// about
yy += dy;
if (menuButton(xx,yy,w,h,"About",buttons_enabled,false)) {
    inputOverlay(input_about,false,"");
}

// game end
yy += dy;
if (menuButton(xx,yy,w,h,"Quit",buttons_enabled,false)) {
    exitPressed();
}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
